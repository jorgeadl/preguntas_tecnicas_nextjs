{"data":
[
    {
        "bootcamp": "Full-Stack-JavaScript",
        "questions":[
            {                  
                    "Pregunta": "1. ¿Cuál es tu lenguaje favorito y por qué? ",
                    "Respuesta": "Esta suele ser una de las primeras preguntas que se hacen, ya que sirve para conectar con los gustos y competencias del candidato. Por lo general, se busca identificar las principales áreas de interés que tengas y la variedad de lenguajes de programación con los que puedes trabajar. La respuesta debe ser simple, pero bien argumentada y que demuestre tu nivel de conocimientos.",
                    "Ejemplo": "Mi lenguaje de programación favorito en este momento es Python, porque me permite implementar múltiples funcionalidades usando menos código. El ecosistema que ofrece Python es bastante cómodo para trabajar, ya que ofrece buenas bibliotecas para un sinfín de cosas."
                },
            
            {                  
                    "Pregunta": "2. ¿Cuáles han sido tus responsabilidades anteriores en el puesto como desarrollador full-stack? ",
                    "Respuesta": "En la mayoría de las entrevistas, se indaga respecto al historial laboral de los profesionales. Esto le dará al entrevistador una idea de las responsabilidades que asumiste en el pasado. En este caso, debes orientar tu respuesta hacia las habilidades esenciales que coinciden con los requisitos del puesto de trabajo al que te postulaste.",
                    "Ejemplo": "En mi puesto anterior, fui responsable de múltiples actividades de codificación clave y que requerían la gestión general del proyecto. Por ejemplo, me encargué de crear el código de prueba que serviría para probar, monitorear y asegurar el rendimiento de las aplicaciones. Solía reunirme con los clientes para entender en profundidad sus necesidades y adaptarme a su proyecto."
                },
            {                  
                    "Pregunta": "3. ¿Cómo mantienes tus conocimientos actualizados? ",
                    "Respuesta": "Uno de los aspectos fundamentales para un desarrollador full stack, es contar con conocimientos actuales y adaptados a los avances en materia de tecnología. Por ello, el entrevistador querrá asegurarse de tu disposición para mantener una formación constante. Indica tu interés por adquirir nuevas habilidades, asumir retos y avanzar en tu perfil profesional.",
                    "Ejemplo": "Para mí, la educación constante y la actualización de mis conocimientos es un elemento esencial. Por ello, suelo asistir a eventos y seminarios sobre tecnología que presentan nuevos productos, herramientas y extensiones que me servirán para mejorar mi trabajo. En añadido, leo habitualmente blogs y revistas especializadas en programación para descubrir las tendencias relevantes."
                },
            {                  
                    "Pregunta": "4. ¿Qué factores consideras al codificar respecto al SEO?",
                    "Respuesta": "Después de las preguntas generales sobre el cargo de desarrollador full stack, es probable que el entrevistador comience a hablar sobre elementos mucho más técnicos. Esta es una manera efectiva de reconocer cómo realizas funciones específicas en el puesto de programación y desarrollo. Orienta tu respuesta hacia los detalles de tu trabajo y, si es posible, comparte un ejemplo.",
                    "Ejemplo": "Hay una serie de estándares clave que siempre implemento en mi código. Algunos de ellos son la especificación de una etiqueta alt en cualquier imagen, etiquetas HTML precisas para la jerarquía de los contenidos, SSL habilitado e integración con Google Ads. Esto influye positivamente en el posicionamiento SEO, debido a que permite clasificar de forma orgánica a un sitio web en los motores de búsqueda."
                },
            {                  
                    "Pregunta": "5. ¿Cuáles son los principales desafíos de trabajar como desarrollador full-stack?",
                    "Respuesta": "Los desarrolladores full stack llevan a cabo tareas relacionadas con la programación front-end y back-end, lo cual puede representar todo un desafío. Con esta interrogante, el empleador puede distinguir el nivel de comprensión que tiene el candidato acerca de su campo profesional. Demuestra tu capacidad para asumir desafíos laborales y procura dar ejemplos breves sobre cómo has resuelto inconvenientes en el trabajo.",
                    "Ejemplo": "La labor de un desarrollador full stack es muy amplia, ya que amerita una amplia gama de habilidades de programación, codificación y análisis. Para mí, uno de los principales retos de la profesión es dominar por completo cada una de las áreas de trabajo que tiene. Generalmente, me apoyo de los conocimientos técnicos y competencias en el campo, junto con los aportes individuales de los miembros de mi equipo para llevar a cabo proyectos eficientes."
                },
            {                  
                    "Pregunta": "6. ¿Cuáles son los casos más comunes de uso para Docker?",
                    "Respuesta": "Esta pregunta sirve para medir tu nivel de conocimiento y experiencia con esta plataforma en particular como un producto de servicio (PSP). Si cuentas con experiencia previa en Docker, descríbela de la manera más detallada posible. En caso de no contar con experiencia en el empleo de ella, puedes mencionarlo al entrevistador y añadir las ventajas que conoces sobre este proyecto.",
                    "Ejemplo": "A pesar de no tener experiencia previa con Docker, en mi anterior puesto aprendí sobre algunos de los beneficios que ofrece. Es recomendable para crear cajas de prueba y facilitar las pruebas para la integración continua. Uno de mis objetivos a corto plazo es aprovechar Docker para encapsular aplicaciones heredades y obtener competencia en su utilización."
                },
            {                  
                    "Pregunta": "7. ¿Qué beneficios tiene para ti el empleo de CommonJS?",
                    "Respuesta": "CommonJS constituye una extensión del lenguaje de secuencias de comandos de JavaScript, por lo que es un tema con el que todo desarrollador full stack debería estar relacionado. Puede que el entrevistador quiera saber cómo usas CommonJS en tus tareas de programación y las ventajas que conseguiste al usarlo. Enfócate en hablar sobre cualquier experiencia previa o lo que has aprendido sobre ella.",
                    "Ejemplo": "CommonJS es un diseño del lado del servidor, por lo que considero que es una excelente alternativa para escribir declaraciones y módulos de importación. También sirve para cambiar entre el desarrollo del lado del servidor y del cliente con JavaScript. Por último, ofrece facilidad de uso gracias a su sintaxis."
                },
            {                  
                    "Pregunta": "8. ¿En qué consiste CORS y qué beneficios ofrece?",
                    "Respuesta": "Las preguntas técnicas representan una estrategia que emplean los entrevistadores para conocer tu nivel de comprensión en materia de programación. En tal sentido, es valioso tener conocimientos sobre aplicaciones y recursos específicos. En tu respuesta, indica lo que sabes sobre la aplicación y si cuentas con experiencia previa en su utilización.",
                    "Ejemplo": "CORS es una abreviatura de intercambio de recursos de origen cruzado, que es uno de los procesos que utilizo para acceder a los recursos web de diferentes dominios. Yo lo recomiendo especialmente para integrar secuencias de comandos web, porque es posible hacerlo de una manera más abierta con el contenido externo del dominio original. Como resultado, se consigue una integración fluida entre dos o más servicios web."
                },       
            {                  
                    "Pregunta": "9. ¿Cuáles son las estrategias que empleas para evitar que los bots raspen las API de acceso público?",
                    "Respuesta": "Por lo general, los desarrolladores full stack son los responsables de gran parte de la funcionalidad de los productos de aplicaciones web de una empresa. En consecuencia, el entrevistador querrá conocer cómo aplicas la gestión de riesgos en proyectos técnicos. Intenta orientar tu respuesta hacia tu habilidad de resolución de problemas y la manera en que empleas tus conocimientos en el día a día.",
                    "Ejemplo": "Si los datos de la API son de acceso público, técnicamente es imposible evitar el raspado de datos por completo. No obstante, una solución efectiva que disuade a la mayoría de bots es la limitación de la velocidad o aceleración. Esto evita que algunos dispositivos realicen demasiadas solicitudes en un periodo de tiempo específico."
                },
            {                  
                    "Pregunta": "10. ¿En qué consiste el\"modo estricto\" y cuáles son las principales ventajas que tiene?",
                    "Respuesta": "El\"use strict\" o modo estricto es una funcionalidad que indica el modo en que un navegador debe ejecutar el código de JavaScript. Puede ser una de las interrogantes de entrevista para desarrollador full stack, ya que le ofrece al entrevistador una orientación sobre tu capacidad para aprovechar herramientas de diferentes tipos en tus proyectos. Tu respuesta debe mostrar tu adaptabilidad para utilizar herramientas de desarrollo de todo tipo."
                }   
        ]
    },{
        "bootcamp": "Front-End",
        "questions":[
            {                  
                    "Pregunta": "1. ¿Cuáles son los retos que has enfrentado como Desarrollador Front-End?",
                    "Respuesta": "Con esta pregunta conocerás los retos que enfrentó previamente el candidato. Lo importante es que identifiques las soluciones que implementó y la experiencia que ganó gracias a estas situaciones.",
                    "Ejemplo": "Repuesta deseada: Adaptación a los constantes cambios de los lenguajes de programación, frameworks o librerías. Optimización del sitio según los resultados mostrados por Lighthouse.Asegurarse de que cada botón, menú, panel o enlace funcione correctamente. Creación de un sitio funcional y atractivo para el cliente. Depuración del código que compone la interfaz. El candidato indicará los retos que enfrentó en los proyectos en los que participó. Por tal motivo, mencionará cuáles son los problemas más recurrentes cuando se desarrolla la interfaz de un sitio o app. Además, hablará de los conocimientos que obtuvo de cada situación que enfrentó."
                },            
            {                  
                    "Pregunta": "2. ¿Qué técnicas de optimización has usado para mejorar el rendimiento de un sitio web?",
                    "Respuesta": "Esta pregunta te ayudará a que comprendas la forma en que el candidato mejora el rendimiento de un sitio web. Lo ideal es que conozcas cada una de las técnicas que usa para lograrlo.",
                    "Ejemplo": "Respuesta deseada: Minificación: requiere de la eliminación de saltos de línea, atributos, espacios, duplicados y recorte de nombres de clases en los códigos HTML, CSS y JavaScript que componen al sitio. Escritura del código: un código organizado permitirá la correcta carga de todos los elementos de la página sin crear demoras ni errores en la renderización. Compresión: reduce el tamaño de los archivos HTML, CSS y JavaScript de la plataforma. Lo cual mejora la capacidad de respuesta del sitio. Diseño responsivo: implementación de una versión del sitio que responda correctamente cuando el usuario interactúa a través de un dispositivo móvil. Optimización de imágenes: la reducción del tamaño de las imágenes en el sitio mejora la velocidad de carga del mismo. Reducción de scripts de terceros: los scripts son fragmentos de código que añaden funcionalidades al sitio. No obstante, su implementación puede afectar el rendimiento del sitio. Almacenamiento en caché: cuando los usuarios reingresan a una página, esta se cargará más rápido gracias a los datos que el navegador guardó previamente. El candidato mencionará las técnicas que utiliza para optimizar un sitio web. Destacará que la implementación de estos métodos mejora el rendimiento y velocidad del sitio. Además, de que así logra que los usuarios tengan una mejor experiencia."
                },
            {                  
                    "Pregunta": "3. ¿En qué proyectos de desarrollo web has participado?, ¿cuáles son los resultados que lograste? ",
                    "Respuesta": "Esta pregunta está enfocada en que conozcas los proyectos en los que ha trabajado tu candidato. De esta manera, conocerás si cuenta con la experiencia y habilidades necesarias para cubrir el cargo, así como los resultados que obtuvo en cada uno.",
                    "Ejemplo": "Respuesta deseada: El Desarrollador Front-End suele trabajar en proyectos como: Sitios web. Aplicaciones móviles. Videojuegos. Plataformas empresariales. Los resultados esperados son los siguientes: Mejora en la velocidad del sitio. Mejora en la experiencia ofrecida a los usuarios. Mejora en la accesibilidad y usabilidad del sitio. Posicionamiento del sitio en los primeros resultados búsqueda gracias a la optimización. El candidato hablará de los proyectos en los que participó y los resultados obtenidos en ellos. Mencionará que el objetivo es lograr una interfaz funcional para los usuarios sin importar el producto que se ofrece. Lo importante es que reconozcas si su experiencia previa se ajusta al perfil que busca la empresa."},
            {                  
                    "Pregunta": "4. ¿Qué técnicas de depuración has utilizado para eliminar errores en el código durante el desarrollo?",
                    "Respuesta": "Esta pregunta te ayudará a entender el nivel de conocimiento que tiene el candidato respecto a la detección de errores en la interfaz. La idea es que mencione los diferentes métodos que usó en proyectos previos.",
                    "Ejemplo": "Respuesta deseada: Análisis estático: examinación del código antes de su ejecución. Impresión o de seguimiento: monitorea los errores que afectan el funcionamiento del sitio. Considera el uso de software que informa sobre fallos en la plataforma. Remota: depura la plataforma a través de un entorno diferente en el que es desarrollada y probada. Post-mortem: enfocada en depurar el código si el sitio experimenta fallos críticos. El candidato dirá que durante el proceso de desarrollo siempre se encuentran errores de funcionamiento en la interfaz. Por ello, son usadas cualquiera de las técnicas previamente mencionadas. Con las cuales, previene y corrige errores que provocarían que los usuarios interactúen con una plataforma que les dejaría una mala experiencia."
                },
            {                  
                    "Pregunta": "5. ¿Has desarrollado interfaces escalables? ¿Qué prácticas implementas para lograrlo?",
                    "Respuesta": "Las características de una interfaz escalable es que es flexible y fácil de mantener. Gracias a esta pregunta conocerás si tu candidato cuando con la capacidad para desarrollar una plataforma de este tipo",
                    "Ejemplo": "Respuesta deseada: Arquitectura: combina tanto el back-end como el  front-end. El objetivo es que el sitio cuente con capacidad para recibir una gran cantidad de tráfico, y recibir actualizaciones en el diseño de la interfaz. Cobertura: un código escalable es mantenible, independiente, personalizable y legible para todo el equipo de desarrollo. Pruebas: para garantizar que la plataforma ofrece una experiencia de usuario satisfactoria. Uso de frameworks: facilitan la creación de un sitio en menos tiempo, utilizando fragmentos de código previamente utilizado en otros proyectos. Uso de caché: permite una navegación rápida y la reducción de solicitudes de back-end no deseadas. El candidato mencionará los proyectos de escalamiento front-end en los que participó. Por ello, hablará de las prácticas con las que asegura el rendimiento de un sitio, garantizando la usabilidad de la plataforma a pesar de un aumento exponencial de usuarios."
                },
            {                  
                    "Pregunta": "6. Explique cómo se aseguraría de que su diseño web sea fácil de usar y qué pasos tomaría para lograrlo.",
                    "Respuesta": "Un desarrollador front-end necesita comunicarse con frecuencia y trabajar junto con diseñadores de UX (Experiencia de usuario) para imaginar y conceptualizar una página web que diseñe una experiencia centrada en el usuario, probar el sitio web con los usuarios para garantizar un diseño óptimo y garantizar que la página web o el sitio está optimizado para la navegación de teléfonos móviles. Si no tenemos un diseñador de UX a mano, ejecutaríamos pruebas de usuario o grabaciones de usuarios como Hotjar para asegurarnos de que no haya bloqueadores de UX en el diseño web o la aplicación web que estamos desarrollando.",
                    "Ejemplo": ""
                },
            {                  
                    "Pregunta": "7. ¿Cómo estructura su código fuente para que sea fácil de usar por sus colegas?",
                    "Respuesta": "Un desarrollador front-end necesita usar estándares comunes y explicar su uso de la organización del código y los comentarios. Deben explicar cómo usan las notas en su proceso de programación para explicar los pasos que han dado, asegurando así la eficiencia de la comprensión entre los colaboradores. Si existen estándares para comentar o documentar el código en la empresa, es necesario adherirse a estos estándares.",
                    "Ejemplo": ""
                },
            {                  
                    "Pregunta": "8. Explique cuál es la diferencia entre la herencia de clase y prototipo en Javascript.",
                    "Respuesta": "La herencia en JavaScript es diferente a la mayoría de los otros lenguajes de programación. El sistema de objetos en JavaScript está basado en prototipos, no en clases. Los objetos en JavaScript son solo una colección de pares de nombre (clave) y valor. Cuando se trata de herencia, JavaScript solo tiene una construcción: objetos. Cada objeto tiene una propiedad privada que contiene un enlace a otro objeto llamado su prototipo.",
                    "Ejemplo": ""
                },       
            {                  
                    "Pregunta": "9. Explique cuál es la diferencia entre una solicitud GET y POST.",
                    "Respuesta": "Tanto el método GET como el POST se utilizan para transferir datos del cliente al servidor en el protocolo HTTP. La principal diferencia entre el método POST y GET es que GET lleva parámetros de solicitud agregados en la cadena de URL, mientras que POST lleva el parámetro de solicitud en el cuerpo del mensaje, lo que lo convierte en una forma más segura de transferir datos de cliente a servidor en HTTP.",
                    "Ejemplo": ""
                },
            {                  
                    "Pregunta": "10. ¿Explica la importancia del HTML DOCTYPE?",
                    "Respuesta": "DOCTYPE es una instrucción para el navegador web sobre la versión del lenguaje de marcado en el que está escrita la página. La declaración DOCTYPE debe ser lo primero en su documento HTML, antes de etiqueta. La declaración Doctype apunta a una definición de tipo de documento (DTD). El tipo de documento proporciona reglas de lenguaje de marcado, por lo que un navegador puede interpretar el contenido correctamente.",
                    "Ejemplo":""
                }   
        ]
    },{
        "bootcamp": "Data-Science",
        "questions":[
            {                  
                    "Pregunta": "1. ¿Qué es el overfitting (sobreajuste)?",
                    "Respuesta": "El sobreajuste en el aprendizaje automático se produce cuando el modelo no está bien generalizado. El modelo se centra demasiado en el conjunto de entrenamiento. Capta muchos detalles o incluso ruido en el conjunto de entrenamiento. Por lo tanto, no logra captar la tendencia general o las relaciones en los datos. Si un modelo es demasiado complejo en comparación con los datos, probablemente estará sobreajustado. Un buen indicador de sobreajuste es la gran diferencia entre la precisión de los conjuntos de entrenamiento y de prueba. Los modelos sobreajustados suelen tener una precisión muy alta en el conjunto de entrenamiento, pero la precisión de la prueba suele ser impredecible y mucho más baja que la de entrenamiento.",
                    "Ejemplo": ""
                },
            
            {                  
                    "Pregunta": "2. ¿Cómo se puede reducir el overfitting?",
                    "Respuesta": "Podemos reducir el sobreajuste haciendo que el modelo sea más generalizado, lo que significa que debe centrarse más en la tendencia general que en los detalles específicos. Si es posible, recoger más datos es una forma eficaz de reducir el sobreajuste. Le darás más jugo al modelo para que tenga más material del que aprender. Los datos siempre son valiosos, especialmente para los modelos de aprendizaje automático. Otro método para reducir la sobreadaptación es reducir la complejidad del modelo. Si un modelo es demasiado complejo para una tarea determinada, es probable que se produzca un sobreajuste. En estos casos, debemos buscar modelos más sencillos.",
                    "Ejemplo": ""
                },
            {                  
                    "Pregunta": "3. ¿Qué es la regularización?",
                    "Respuesta": "Hemos mencionado que la principal razón del sobreajuste es que un modelo sea más complejo de lo necesario. La regularización es un método para reducir la complejidad del modelo. Lo hace penalizando los términos más altos del modelo. Con la adición de un término de regularización, el modelo intenta minimizar tanto la pérdida como la complejidad. Los dos tipos principales de regularización son L1 y L2. La regularización L1 resta una pequeña cantidad de los pesos de las características no informativas en cada iteración. Así, hace que estos pesos se conviertan finalmente en cero. Por otro lado, la regularización L2 elimina un pequeño porcentaje de los pesos en cada iteración. Estos pesos se acercarán a cero, pero nunca llegarán a ser 0.",
                    "Ejemplo": ""
                },
            {                  
                    "Pregunta": "4. ¿Cuál es la diferencia entre clasificación y agrupación?",
                    "Respuesta": "Ambas son tareas de aprendizaje automático. La clasificación es una tarea de aprendizaje supervisado, por lo que tenemos observaciones etiquetadas (es decir, puntos de datos). Entrenamos un modelo con datos etiquetados y esperamos que prediga las etiquetas de los nuevos datos. Por ejemplo, la detección de correos electrónicos no deseados es una tarea de clasificación. Proporcionamos un modelo con varios correos electrónicos marcados como spam o no spam. Una vez entrenado el modelo con esos correos, evaluará los nuevos correos de forma adecuada. La agrupación es una tarea de aprendizaje no supervisada, por lo que las observaciones no tienen etiquetas. Se espera que el modelo evalúe las observaciones y las agrupe en clusters. Las observaciones similares se colocan en el mismo clúster. En el caso óptimo, las observaciones del mismo clúster están lo más cerca posible unas de otras y los diferentes clústeres están lo más separados posible. Un ejemplo de tarea de clustering sería agrupar a los clientes en función de su comportamiento de compra. Python Las estructuras de datos incorporadas son de crucial importancia. Por lo tanto, debes estar familiarizado con lo que son y cómo interactuar con ellas. Lista, diccionario, conjunto y tupla son las 4 principales estructuras de datos incorporadas en Python.",
                    "Ejemplo": ""
                },
            {                  
                    "Pregunta": "5. ¿Cuál es la diferencia entre listas y tuplas?",
                    "Respuesta": {"texto":"La principal diferencia entre las listas y las tuplas es la mutabilidad. Las listas son mutables, por lo que podemos manipularlas añadiendo o eliminando elementos. mylist = [1,2,3] mylist.append(4) mylist.remove(1) print(mylist) [2,3,4]. En cambio, las tuplas son inmutables. Aunque podemos acceder a cada elemento de una tupla, no podemos modificar su contenido. mytuple = (1,2,3) mytuple.append(4) AttributeError: 'tuple' object has no attribute 'append'. Un punto importante a mencionar aquí es que aunque las tuplas son inmutables, pueden contener elementos mutables como listas o conjuntos.","codigo":"mytuple = (1,2,['a','b','c'])mytuple[2]['a','b','c']mytuple[2][0]=['A']print(mytuple)(1,2,[['A'],'b','c'])"},
                    "Ejemplo": ""
                },
            {                  
                    "Pregunta": "6. ¿Cuál es la diferencia entre listas y sets?",
                    "Respuesta": "Hagamos un ejemplo para demostrar la principal diferencia entre listas y conjuntos. text = 'Python is awesome!' mylist = list(text) myset = set(text) print(mylist) ['P','y','t', 'h', 'o', 'n', ' ', 'i', 's', ' ', 'a', 'w', 'e', 's', 'o', 'm', 'e', '!'] print(myset) {'t', ' ', 'i', 'e', 'm', 'P', '!', 'y', 'o', 'h', 'n', 'a', 's', 'w'} Como vemos en los objetos resultantes, la lista contiene todos los caracteres de la cadena mientras que el conjunto sólo contiene valores únicos. Otra diferencia es que los caracteres de la lista están ordenados según su ubicación en la cadena. Sin embargo, los caracteres del conjunto no están ordenados.",
                    "Ejemplo": ""
                },
            {                  
                    "Pregunta": "7. ¿Qué es un diccionario y cuáles son las características importantes de los diccionarios?",
                    "Respuesta": "Un diccionario en Python es una colección de pares clave-valor. Es similar a una lista en el sentido de que cada elemento de una lista tiene un índice asociado que empieza por 0. mylist = ['a', 'b', 'c'] mylist[1] 'b' En un diccionario, las claves son el índice. Así, podemos acceder a un valor utilizando su clave. mydict = {'John': 24, 'Jane': 26, 'Ashley': 22} mydict['Jane']      26 Las claves de un diccionario son únicas, lo que tiene sentido porque actúan como una dirección para los valores.SQL SQL es una habilidad extremadamente importante para los científicos de datos. Hay un gran número de empresas que almacenan sus datos en una base de datos relacional. SQL es lo que se necesita para interactuar con las bases de datos relacionales. Es probable que te hagan una pregunta que implique escribir una consulta para realizar una tarea específica. También es posible que te hagan una pregunta sobre conocimientos generales de bases de datos.",
                    "Ejemplo": ""
                },
            {                  
                    "Pregunta": "8. ¿Qué es la normalización y la desnormalización en una base de datos?",
                    "Respuesta": "Estos términos están relacionados con el diseño del esquema de la base de datos. La normalización y la desnormalización tienen como objetivo optimizar diferentes métricas. El objetivo de la normalización es reducir la redundancia e inconsistencia de los datos aumentando el número de tablas. Por otro lado, la desnormalización tiene como objetivo acelerar la ejecución de la consulta. La desnormalización disminuye el número de tablas, pero al mismo tiempo añade cierta redundancia. ",
                    "Ejemplo": ""
                },       
            {                  
                    "Pregunta": "9. ¿Qué técnicas de machine learning has implementado?",
                    "Respuesta": "Con esta pregunta conocerás los diferentes métodos ocupados por el candidato para el análisis predictivo. De manera que destacará aquellos que considere más efectivos o relevantes.",
                    "Ejemplo": "Respuesta esperada: Algunas de las técnicas de machine learning utilizadas para el desarrollo de modelos son: Árboles de decisión: predice el valor de una variable basándose en una serie de decisiones alternativas. Clasificadores lineales: clasifica los datos de acuerdo a una serie de características y patrones reconocidos en ellos. Support-vector machine: algoritmo que analiza datos para resolver problemas regresión y clasificación. Redes neuronales básicas (1 capa): son algoritmos inspirados en el cerebro humano, imitando la forma en que las neuronas biológicas se transmiten entre sí. Las redes neuronales entrenan con datos. De manera que, aprenden y mejoran su precisión con el tiempo. A partir de las herramientas anteriores se construyen modelos más avanzados: Boosting: reduce la variación y sesgo en los datos mediante la optimización constante del modelo. Random Forest: combina los valores obtenidos de diversos árboles de decisión llegando a un resultado preciso. Gradient Boosted Trees: combina escalonadamente varios árboles de decisión. Los cuales corrigen secuencialmente los errores presentados por el árbol anterior. Lo cual, posibilita una predicción precisa y la optimización constante del modelo. Deep Learning: redes neuronales de tres o más capas que aprenden y analizan grandes conjuntos de datos. Una de las redes realiza la predicción. Las dos restantes optimizan y refinan la precisión de los datos entregados. El candidato mencionará las técnicas que domina. Dirá en qué consisten, utilidad, funcionamiento y el tipo de resultados que arroja cada método. Demostrando su dominio en el desarrollo de modelos predictivos. Más aún el candidato entiende que la utilización de cada una de estas depende del problema que se esté resolviendo y los datos con que se está trabajando."
                },
            {                  
                    "Pregunta": "10. ¿De qué forma evitas el sobreajuste en los modelos?",
                    "Respuesta": "Esta pregunta permitirá que conozcas cómo el candidato corrige un modelo que se ha sobreajustado a la muestra. Así, conocerás los métodos que utiliza para lograrlo.",
                    "Ejemplo":"Respuesta esperada: Algunos métodos que evitan el sobreajuste son: Validación cruzada: los datos son divididos en diferentes conjuntos con los que el modelo será entrenado de manera alternada. Al menos uno de los conjuntos será utilizado para pruebas. Aumento de datos: el entrenamiento con mayor número de datos ayudaría a que el sistema detecte eficientemente patrones y tendencias. Selección de funciones útiles: consiste en la eliminación de características consideradas como innecesarias. Esto mejora el rendimiento del modelo. Regularización: reduce la variación y el riesgo de generación de sesgos. Parada anticipada: detención del entrenamiento antes de la sobrecarga del sistema. Ensamble: entrenamiento de varios modelos de predicción y análisis predictivo. Dichos modelos se combinarán posteriormente en uno solo. El candidato mencionará los métodos con los que evita el sobreajuste de los modelos. Profundizará en aquellos que le brindan resultados en el menor tiempo y costo posible. De manera que, respalda que los modelos arrojen datos confiables."
                }   
        ]
    },{
        "bootcamp": "UX-UI",
        "questions":[
            {                  
                    "Pregunta": "1. ¿Para ti qué es el diseño UX y por qué es importante?",
                    "Respuesta": "Según su respuesta podrás darte una idea sobre sus conocimientos sobre los conceptos básicos. Concéntrate en recibir una definición que destaque quién es tu candidato como diseñador. Su respuesta sobre diseño deberá quedar clara, como si lo explicara a un niño de 10 años. Posteriormente el candidato explicará la importancia del UX y esto debe resaltar su pasión por el enfoque de diseño de la empresa y su propia perspectiva de diseño. ",
                    "Ejemplo": ""
                },            
            {                  
                    "Pregunta": "2. ¿Qué significa para ti el término “Design Thinking”?",
                    "Respuesta": "El Design Thinking es un método práctico y creativo para una resolución de problemas. Se trata de descubrir información valiosa sobre las necesidades no satisfechas del público meta. Es una forma de pensamiento basado o centrado en soluciones, con la intención de producir un resultado constructivo. Con la respuesta del candidato podrás conocer su pensamiento analítico, resolución de problemas y sobre todo, su enfoque en los usuarios. Su mentalidad de proceso de diseño y si diseña productos en función de las necesidades, motivaciones y comportamientos de las personas.",
                    "Ejemplo": ""
                },
            {                  
                    "Pregunta": "3. ¿Cuál es tu proceso de diseño? Describe los métodos de diseño que sigues.",
                    "Respuesta": "Aquí podrás descubrir cómo es que el candidato respalda con palabras su gran trabajo, al explicar su proceso de diseño. Puede describirnos su enfoque potencial para un proyecto típico o puede explicar cómo lo ha hecho en el pasado en otros proyectos. Como reclutador, podrás  analizar su capacidad para explicar su enfoque así como lo que lo diferencia de otros diseñadores.",
                    "Ejemplo": ""
                },
            {                  
                    "Pregunta": "4. ¿Cómo decides qué funciones agregar a tu producto?",
                    "Respuesta":"Ésta es una pregunta delicada porque la respuesta depende del contexto. Así que el candidato dará un ejemplo de la vida real que muestre cómo validó o rechazó una hipótesis. Cómo reclutador deberás analizar su proceso y cómo aborda los objetivos comerciales a la vez que plasma su talento.Puede que se base en investigaciones realizadas sobre el mercado meta, o que se enfoque en las características del diseño que resuelven las necesidades del usuario.",
                    "Ejemplo": ""
                },
            {                  
                    "Pregunta": "5. ¿Qué herramientas de análisis e indicadores clave de rendimiento (KPI) ha utilizado para evaluar sus diseños?",
                    "Respuesta": "Los grandes diseñadores de UX buscan crear experiencias que funcionen intuitivamente para un público objetivo específico. Es por eso que la recopilación de datos cuantitativos sobre el uso del sitio o una aplicación juega un papel importante en el arsenal de herramientas de evaluación de éxito de UX de un diseñador de UX. En la respuesta del candidato debemos buscar cómo es que identifica y cuantifica las acciones que los usuarios toman cuando se encuentran utilizando el producto que creó.",
                    "Ejemplo": ""
                },
            {                  
                    "Pregunta": "6. ¿Cuál es tu proyecto favorito en el que has trabajado?",
                    "Respuesta": "Es importante tener el portafolio del diseñador y con suerte que su trabajo favorito esté plasmado en el portafolio. Podrás conocer de manera visual y palpable lo que el diseñador es capaz de hacer y si se podría alinear a lo que la empresa requiere. Su trabajo favorito hará que conozcas al candidato más a detalle, su manera de pensar y lo que le emociona de su profesión. Obtendrás además, algunos insights de por qué eligió específicamente el trabajo señalado, y de qué manera podemos atraer esa pasión hacia la empresa.",
                    "Ejemplo": ""
                },
            {                  
                    "Pregunta": "7. ¿Cuál es tu proceso para trabajar con otros diseñadores, desarrolladores o gerentes de producto?",
                    "Respuesta": "Con su respuesta te darás una idea del estilo de trabajo del candidato. El diseño es un trabajo de equipo y, como diseñador de UX, es fundamental que sepa cómo comunicar eficazmente las decisiones de diseño con sus compañeros desde el comienzo del proyecto hasta la implementación. Es probable que cada miembro del equipo vea un proyecto a través de diferentes puntos de vista, pero debe poder comunicarse con todos ellos para detectar rápidamente cualquier problema o malentendido.",
                    "Ejemplo": ""
                },
            {                  
                    "Pregunta": "8. Cuéntame sobre un momento en el que un proyecto no salió exactamente como estaba planeado. ¿Cómo lo arreglaste?",
                    "Respuesta": "Esta pregunta es clave para comprender las habilidades de resolución de problemas que el candidato tiene y mostrará si puede mantener la calma bajo presión. El candidato podrá hablar acerca de algún momento en el que hubo un problema en el proceso, recortes presupuestarios, negligencia propia o factores fuera de su control y cómo fue que eso no lo detuvo para sacar el proyecto adelante.",
                    "Ejemplo": ""
                },       
            {                  
                    "Pregunta": ". ¿Qué haces cuando un cliente te dice que no le ha gustado tu diseño?",
                    "Respuesta": "En una situación como esta, un gran diseñador de UX deberá mostrar una moderación reflexiva. No tomará la crítica como algo personal, sino que la utilizará como una oportunidad para profundizar y descubrir las verdaderas razones por las que a un cliente puede que no le guste un diseño. Por lo que descubrirás qué tan objetivo puede ser el diseñador y sus cualidades de servicio, así como el trato con el cliente. Habrá que estar atento a su respuesta para ver cómo es que respalda su diseño basado en principios probados y verdaderos, aprendizajes pasados, informes y estudios, mejores prácticas, estándares y convenciones de diseño que han sido probados, estudiados y validados.",
                    "Ejemplo": ""
                },
            {                  
                    "Pregunta": "10. ¿¿Cuáles son algunas de las tendencias más importantes en la industria del diseño de UX en este momento?",
                    "Respuesta": "En su respuesta, escucharás la pasión y el conocimiento del candidato, así como su visión a futuro para su empresa. Un buen diseñador estará entusiasmado con este tema; la respuesta le ayudará a comprender dónde se encuentra su enfoque actual. Además, sabrás cómo es que un diseñador de UX se mantiene al día con la industria. Ya sea que escuche podcasts de UX, lea blogs y libros de UX, asista a seminarios web y cursos de capacitación en línea para el aprendizaje continuo, etc.",
                    "Ejemplo":""
                }   
        ]
    },{
        "bootcamp": "Data-Analytics",
        "questions":[
            {                  
                    "Pregunta": "1. ¿Cuáles son los retos que has enfrentado como Desarrollador Front-End?",
                    "Respuesta": "Con esta pregunta conocerás los retos que enfrentó previamente el candidato. Lo importante es que identifiques las soluciones que implementó y la experiencia que ganó gracias a estas situaciones.",
                    "Ejemplo": "Repuesta deseada: Adaptación a los constantes cambios de los lenguajes de programación, frameworks o librerías. Optimización del sitio según los resultados mostrados por Lighthouse. Asegurarse de que cada botón, menú, panel o enlace funcione correctamente. Creación de un sitio funcional y atractivo para el cliente. Depuración del código que compone la interfaz. El candidato indicará los retos que enfrentó en los proyectos en los que participó. Por tal motivo, mencionará cuáles son los problemas más recurrentes cuando se desarrolla la interfaz de un sitio o app. Además, hablará de los conocimientos que obtuvo de cada situación que enfrentó."
                },            
            {                  
                    "Pregunta": "2. ¿Qué técnicas de optimización has usado para mejorar el rendimiento de un sitio web?",
                    "Respuesta": "Esta pregunta te ayudará a que comprendas la forma en que el candidato mejora el rendimiento de un sitio web. Lo ideal es que conozcas cada una de las técnicas que usa para lograrlo.",
                    "Ejemplo": "Respuesta deseada:  Minificación: requiere de la eliminación de saltos de línea, atributos, espacios, duplicados y recorte de nombres de clases en los códigos HTML, CSS y JavaScript que componen al sitio. Escritura del código: un código organizado permitirá la correcta carga de todos los elementos de la página sin crear demoras ni errores en la renderización.  Compresión: reduce el tamaño de los archivos HTML, CSS y JavaScript de la plataforma. Lo cual mejora la capacidad de respuesta del sitio. Diseño responsivo: implementación de una versión del sitio que responda correctamente cuando el usuario interactúa a través de un dispositivo móvil. Optimización de imágenes: la reducción del tamaño de las imágenes en el sitio mejora la velocidad de carga del mismo. Reducción de scripts de terceros: los scripts son fragmentos de código que añaden funcionalidades al sitio. No obstante, su implementación puede afectar el rendimiento del sitio.  Almacenamiento en caché: cuando los usuarios reingresan a una página, esta se cargará más rápido gracias a los datos que el navegador guardó previamente. El candidato mencionará las técnicas que utiliza para optimizar un sitio web. Destacará que la implementación de estos métodos mejora el rendimiento y velocidad del sitio. Además, de que así logra que los usuarios tengan una mejor experiencia."
                },
            {                  
                    "Pregunta": "3. ¿En qué proyectos de desarrollo web has participado?, ¿cuáles son los resultados que lograste?",
                    "Respuesta": "Esta pregunta está enfocada en que conozcas los proyectos en los que ha trabajado tu candidato. De esta manera, conocerás si cuenta con la experiencia y habilidades necesarias para cubrir el cargo, así como los resultados que obtuvo en cada uno.",
                    "Ejemplo": "Respuesta deseada: El Desarrollador Front-End suele trabajar en proyectos como: Sitios web. Aplicaciones móviles. Videojuegos. Plataformas empresariales. Los resultados esperados son los siguientes: Mejora en la velocidad del sitio. Mejora en la experiencia ofrecida a los usuarios. Mejora en la accesibilidad y usabilidad del sitio. Posicionamiento del sitio en los primeros resultados búsqueda gracias a la optimización. El candidato hablará de los proyectos en los que participó y los resultados obtenidos en ellos. Mencionará que el objetivo es lograr una interfaz funcional para los usuarios sin importar el producto que se ofrece. Lo importante es que reconozcas si su experiencia previa se ajusta al perfil que busca la empresa."
                },
            {                  
                    "Pregunta": "4. ¿Qué técnicas de depuración has utilizado para eliminar errores en el código durante el desarrollo?",
                    "Respuesta": "Esta pregunta te ayudará a entender el nivel de conocimiento que tiene el candidato respecto a la detección de errores en la interfaz. La idea es que mencione los diferentes métodos que usó en proyectos previos.",
                    "Ejemplo": "Respuesta deseada: Análisis estático: examinación del código antes de su ejecución. Impresión o de seguimiento: monitorea los errores que afectan el funcionamiento del sitio. Considera el uso de software que informa sobre fallos en la plataforma.  Remota: depura la plataforma a través de un entorno diferente en el que es desarrollada y probada. Post-mortem: enfocada en depurar el código si el sitio experimenta fallos críticos. El candidato dirá que durante el proceso de desarrollo siempre se encuentran errores de funcionamiento en la interfaz. Por ello, son usadas cualquiera de las técnicas previamente mencionadas. Con las cuales, previene y corrige errores que provocarían que los usuarios interactúen con una plataforma que les dejaría una mala experiencia."
                },
            {                  
                    "Pregunta": "5. ¿Has desarrollado interfaces escalables? ¿Qué prácticas implementas para lograrlo?",
                    "Respuesta": "Las características de una interfaz escalable es que es flexible y fácil de mantener. Gracias a esta pregunta conocerás si tu candidato cuando con la capacidad para desarrollar una plataforma de este tipo.",
                    "Ejemplo": "Respuesta deseada:     Arquitectura: combina tanto el back-end como el  front-end. El objetivo es que el sitio cuente con capacidad para recibir una gran cantidad de tráfico, y recibir actualizaciones en el diseño de la interfaz. Cobertura: un código escalable es mantenible, independiente, personalizable y legible para todo el equipo de desarrollo. Pruebas: para garantizar que la plataforma ofrece una experiencia de usuario satisfactoria. Uso de frameworks: facilitan la creación de un sitio en menos tiempo, utilizando fragmentos de código previamente utilizado en otros proyectos. Uso de caché: permite una navegación rápida y la reducción de solicitudes de back-end no deseadas.  El candidato mencionará los proyectos de escalamiento front-end en los que participó. Por ello, hablará de las prácticas con las que asegura el rendimiento de un sitio, garantizando la usabilidad de la plataforma a pesar de un aumento exponencial de usuarios."
                },
            {                  
                    "Pregunta": "6. Explique cómo se aseguraría de que su diseño web sea fácil de usar y qué pasos tomaría para lograrlo.",
                    "Respuesta": "Un desarrollador front-end necesita comunicarse con frecuencia y trabajar junto con diseñadores de UX (Experiencia de usuario) para imaginar y conceptualizar una página web que diseñe una experiencia centrada en el usuario, probar el sitio web con los usuarios para garantizar un diseño óptimo y garantizar que la página web o el sitio está optimizado para la navegación de teléfonos móviles. Si no tenemos un diseñador de UX a mano, ejecutaríamos pruebas de usuario o grabaciones de usuarios como Hotjar para asegurarnos de que no haya bloqueadores de UX en el diseño web o la aplicación web que estamos desarrollando.",
                    "Ejemplo": ""
                },
            {                  
                    "Pregunta": "7. ¿Cómo estructura su código fuente para que sea fácil de usar por sus colegas?",
                    "Respuesta": "Un desarrollador front-end necesita usar estándares comunes y explicar su uso de la organización del código y los comentarios. Deben explicar cómo usan las notas en su proceso de programación para explicar los pasos que han dado, asegurando así la eficiencia de la comprensión entre los colaboradores. Si existen estándares para comentar o documentar el código en la empresa, es necesario adherirse a estos estándares.",
                    "Ejemplo": ""
                },
            {                  
                    "Pregunta": "8. Explique cuál es la diferencia entre la herencia de clase y prototipo en Javascript.",
                    "Respuesta": "La herencia en JavaScript es diferente a la mayoría de los otros lenguajes de programación. El sistema de objetos en JavaScript está basado en prototipos, no en clases. Los objetos en JavaScript son solo una colección de pares de nombre (clave) y valor. Cuando se trata de herencia, JavaScript solo tiene una construcción: objetos. Cada objeto tiene una propiedad privada que contiene un enlace a otro objeto llamado su prototipo.",
                    "Ejemplo": ""
                },       
            {                  
                    "Pregunta": "9. Explique cuál es la diferencia entre una solicitud GET y POST.",
                    "Respuesta": "Tanto el método GET como el POST se utilizan para transferir datos del cliente al servidor en el protocolo HTTP. La principal diferencia entre el método POST y GET es que GET lleva parámetros de solicitud agregados en la cadena de URL, mientras que POST lleva el parámetro de solicitud en el cuerpo del mensaje, lo que lo convierte en una forma más segura de transferir datos de cliente a servidor en HTTP.",
                    "Ejemplo": ""
                },
            {                  
                    "Pregunta": "0. ¿Explica la importancia del HTML DOCTYPE?",
                    "Respuesta": "DOCTYPE es una instrucción para el navegador web sobre la versión del lenguaje de marcado en el que está escrita la página. La declaración DOCTYPE debe ser lo primero en su documento HTML, antes de etiqueta. La declaración Doctype apunta a una definición de tipo de documento (DTD). El tipo de documento proporciona reglas de lenguaje de marcado, por lo que un navegador puede interpretar el contenido correctamente."
                }   
        ]
    }
]
}